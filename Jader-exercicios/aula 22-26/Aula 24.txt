ex1 - 24

Padrão: B A B A (processado de trás para frente)

Passo 1: 'A'
- C['A'] = 1 (primeira posição de A em F)
- rank('A', L, 7) = 2 (ocorrências de A antes da posição 7)
- rank('A', L, 0) = 0
- Intervalo: [C['A'] + rank('A', L, 0), C['A'] + rank('A', L, 7) - 1] = [1+0, 1+2-1] = [1, 2]

Passo 2: 'B'
- C['B'] = 3
- rank('B', L, 2) = 1
- rank('B', L, 1) = 0
- Intervalo: [C['B'] + rank('B', L, 1), C['B'] + rank('B', L, 2) - 1] = [3+0, 3+1-1] = [3, 3]

Passo 3: 'A'
- C['A'] = 1
- rank('A', L, 3) = 1
- rank('A', L, 2) = 1
- Intervalo: [C['A'] + rank('A', L, 2), C['A'] + rank('A', L, 3) - 1] = [1+1, 1+1-1] = [2, 1] → INVÁLIDO

**Intervalo final: [2, 1] (intervalo vazio) - padrão não encontrado**


-------------------------
ex 2 - 24
Busca para "ACA" (que não existe):
A busca falha quando o intervalo se torna inválido (first > last) durante o processamento.

---------------------------
ex3 - 24
int rank(char c, const string& s, int i) {
    int count = 0;
    for (int j = 0; j < i; j++) {
        if (s[j] == c) {
            count++;
        }
    }
    return count;
}

-------------------------
ex4 - 24
BWT: "ipssm$pissii"
F: "$iiiimppssss" (caracteres ordenados)

C-table:
$: 0
i: 1
m: 5
p: 6
s: 8

Tabela de ocorrências (Occ):
Pos: 0 1 2 3 4 5 6 7 8 9 10 11
L:   i p s s m $ p i s s i  i

$: 0 0 0 0 0 1 1 1 1 1 1  1
i: 1 1 1 1 1 1 1 2 2 2 3  4
m: 0 0 0 0 1 1 1 1 1 1 1  1
p: 0 1 1 1 1 1 1 1 1 1 1  1
s: 0 0 1 2 2 2 2 2 3 4 4  4

------------------------------
ex 5 - 24
Para T = maca$
C-table:
$: 0
a: 1
c: 3
m: 4

Tabela de ranqueamento:
Pos: 0 1 2 3 4
L:   a c m $ a

$: 0 0 0 1 1
a: 1 1 1 1 2
c: 0 1 1 1 1
m: 0 0 1 1 1

-------------------------
ex 6 - 24
Passo único: 'a'
- C['a'] = 1
- rank('a', L, 5) = 2
- rank('a', L, 0) = 0
- Intervalo: [1 + 0, 1 + 2 - 1] = [1, 2]

Ocorrências: 2 (posições 2 e 5 no SA)
